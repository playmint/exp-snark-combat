/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type CombatStateStruct = {
  dungeonArmour: PromiseOrValue<BigNumberish>;
  dungeonHealth: PromiseOrValue<BigNumberish>;
  seekerArmour: PromiseOrValue<BigNumberish>;
  seekerHealth: PromiseOrValue<BigNumberish>;
  slot: PromiseOrValue<BigNumberish>;
  tick: PromiseOrValue<BigNumberish>;
  pi_a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  pi_b: [
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ];
  pi_c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
};

export type CombatStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  [BigNumber, BigNumber],
  [[BigNumber, BigNumber], [BigNumber, BigNumber]],
  [BigNumber, BigNumber]
] & {
  dungeonArmour: BigNumber;
  dungeonHealth: BigNumber;
  seekerArmour: BigNumber;
  seekerHealth: BigNumber;
  slot: BigNumber;
  tick: BigNumber;
  pi_a: [BigNumber, BigNumber];
  pi_b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
  pi_c: [BigNumber, BigNumber];
};

export interface DungeonInterface extends utils.Interface {
  functions: {
    "alignmentBonus(uint8,uint8)": FunctionFragment;
    "claimReward((uint256,uint256,uint256,uint256,uint256,uint256,uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "claimRune((uint256,uint256,uint256,uint256,uint256,uint256,uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "claimed(uint256)": FunctionFragment;
    "commitAction(uint8,uint8,uint8[7])": FunctionFragment;
    "dungeonArmourAlignment()": FunctionFragment;
    "dungeonAttackAlignment()": FunctionFragment;
    "dungeonBattleStart()": FunctionFragment;
    "dungeonHealthAlignment()": FunctionFragment;
    "dungeonRewardRuneAlignment()": FunctionFragment;
    "dungeonStrength()": FunctionFragment;
    "getFreeSlotID()": FunctionFragment;
    "getSeekerSlotHash(uint8)": FunctionFragment;
    "getSeekerSlotID(uint256)": FunctionFragment;
    "getVerifiedRuneAlignment(uint8)": FunctionFragment;
    "resetBattle(uint8,uint8,uint8,uint8)": FunctionFragment;
    "send(uint8,uint8,uint8,uint8,uint8)": FunctionFragment;
    "slots(uint256)": FunctionFragment;
    "verifyState((uint256,uint256,uint256,uint256,uint256,uint256,uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "alignmentBonus"
      | "claimReward"
      | "claimRune"
      | "claimed"
      | "commitAction"
      | "dungeonArmourAlignment"
      | "dungeonAttackAlignment"
      | "dungeonBattleStart"
      | "dungeonHealthAlignment"
      | "dungeonRewardRuneAlignment"
      | "dungeonStrength"
      | "getFreeSlotID"
      | "getSeekerSlotHash"
      | "getSeekerSlotID"
      | "getVerifiedRuneAlignment"
      | "resetBattle"
      | "send"
      | "slots"
      | "verifyState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "alignmentBonus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [CombatStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRune",
    values: [CombatStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitAction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dungeonArmourAlignment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dungeonAttackAlignment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dungeonBattleStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dungeonHealthAlignment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dungeonRewardRuneAlignment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dungeonStrength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeSlotID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSeekerSlotHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeekerSlotID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedRuneAlignment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetBattle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyState",
    values: [CombatStateStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "alignmentBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRune", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dungeonArmourAlignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dungeonAttackAlignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dungeonBattleStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dungeonHealthAlignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dungeonRewardRuneAlignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dungeonStrength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeSlotID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeekerSlotHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeekerSlotID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedRuneAlignment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyState",
    data: BytesLike
  ): Result;

  events: {
    "Action(uint8,uint8,uint8[7])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Action"): EventFragment;
}

export interface ActionEventObject {
  kind: number;
  slotID: number;
  args: number[];
}
export type ActionEvent = TypedEvent<
  [number, number, number[]],
  ActionEventObject
>;

export type ActionEventFilter = TypedEventFilter<ActionEvent>;

export interface Dungeon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DungeonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    alignmentBonus(
      sourceAlignment: PromiseOrValue<BigNumberish>,
      targetAlignment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    claimReward(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    claimRune(
      state: CombatStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commitAction(
      actionKind: PromiseOrValue<BigNumberish>,
      slotID: PromiseOrValue<BigNumberish>,
      args: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dungeonArmourAlignment(overrides?: CallOverrides): Promise<[number]>;

    dungeonAttackAlignment(overrides?: CallOverrides): Promise<[number]>;

    dungeonBattleStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    dungeonHealthAlignment(overrides?: CallOverrides): Promise<[number]>;

    dungeonRewardRuneAlignment(overrides?: CallOverrides): Promise<[number]>;

    dungeonStrength(overrides?: CallOverrides): Promise<[number]>;

    getFreeSlotID(overrides?: CallOverrides): Promise<[number]>;

    getSeekerSlotHash(
      slotID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSeekerSlotID(
      seekerID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVerifiedRuneAlignment(
      runeTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    resetBattle(
      _dungeonAttackAlignment: PromiseOrValue<BigNumberish>,
      _dungeonArmourAlignment: PromiseOrValue<BigNumberish>,
      _dungeonHealthAlignment: PromiseOrValue<BigNumberish>,
      _dungeonRewardRuneAlignment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      actionKind: PromiseOrValue<BigNumberish>,
      seekerID: PromiseOrValue<BigNumberish>,
      attackRuneID: PromiseOrValue<BigNumberish>,
      armourRuneID: PromiseOrValue<BigNumberish>,
      healthRuneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { seekerID: BigNumber; hash: BigNumber }
    >;

    verifyState(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  alignmentBonus(
    sourceAlignment: PromiseOrValue<BigNumberish>,
    targetAlignment: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  claimReward(
    state: CombatStateStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  claimRune(
    state: CombatStateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimed(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commitAction(
    actionKind: PromiseOrValue<BigNumberish>,
    slotID: PromiseOrValue<BigNumberish>,
    args: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dungeonArmourAlignment(overrides?: CallOverrides): Promise<number>;

  dungeonAttackAlignment(overrides?: CallOverrides): Promise<number>;

  dungeonBattleStart(overrides?: CallOverrides): Promise<BigNumber>;

  dungeonHealthAlignment(overrides?: CallOverrides): Promise<number>;

  dungeonRewardRuneAlignment(overrides?: CallOverrides): Promise<number>;

  dungeonStrength(overrides?: CallOverrides): Promise<number>;

  getFreeSlotID(overrides?: CallOverrides): Promise<number>;

  getSeekerSlotHash(
    slotID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSeekerSlotID(
    seekerID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVerifiedRuneAlignment(
    runeTypeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  resetBattle(
    _dungeonAttackAlignment: PromiseOrValue<BigNumberish>,
    _dungeonArmourAlignment: PromiseOrValue<BigNumberish>,
    _dungeonHealthAlignment: PromiseOrValue<BigNumberish>,
    _dungeonRewardRuneAlignment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    actionKind: PromiseOrValue<BigNumberish>,
    seekerID: PromiseOrValue<BigNumberish>,
    attackRuneID: PromiseOrValue<BigNumberish>,
    armourRuneID: PromiseOrValue<BigNumberish>,
    healthRuneID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { seekerID: BigNumber; hash: BigNumber }>;

  verifyState(
    state: CombatStateStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    alignmentBonus(
      sourceAlignment: PromiseOrValue<BigNumberish>,
      targetAlignment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    claimReward(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRune(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commitAction(
      actionKind: PromiseOrValue<BigNumberish>,
      slotID: PromiseOrValue<BigNumberish>,
      args: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    dungeonArmourAlignment(overrides?: CallOverrides): Promise<number>;

    dungeonAttackAlignment(overrides?: CallOverrides): Promise<number>;

    dungeonBattleStart(overrides?: CallOverrides): Promise<BigNumber>;

    dungeonHealthAlignment(overrides?: CallOverrides): Promise<number>;

    dungeonRewardRuneAlignment(overrides?: CallOverrides): Promise<number>;

    dungeonStrength(overrides?: CallOverrides): Promise<number>;

    getFreeSlotID(overrides?: CallOverrides): Promise<number>;

    getSeekerSlotHash(
      slotID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeekerSlotID(
      seekerID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVerifiedRuneAlignment(
      runeTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    resetBattle(
      _dungeonAttackAlignment: PromiseOrValue<BigNumberish>,
      _dungeonArmourAlignment: PromiseOrValue<BigNumberish>,
      _dungeonHealthAlignment: PromiseOrValue<BigNumberish>,
      _dungeonRewardRuneAlignment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      actionKind: PromiseOrValue<BigNumberish>,
      seekerID: PromiseOrValue<BigNumberish>,
      attackRuneID: PromiseOrValue<BigNumberish>,
      armourRuneID: PromiseOrValue<BigNumberish>,
      healthRuneID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { seekerID: BigNumber; hash: BigNumber }
    >;

    verifyState(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Action(uint8,uint8,uint8[7])"(
      kind?: null,
      slotID?: null,
      args?: null
    ): ActionEventFilter;
    Action(kind?: null, slotID?: null, args?: null): ActionEventFilter;
  };

  estimateGas: {
    alignmentBonus(
      sourceAlignment: PromiseOrValue<BigNumberish>,
      targetAlignment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRune(
      state: CombatStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitAction(
      actionKind: PromiseOrValue<BigNumberish>,
      slotID: PromiseOrValue<BigNumberish>,
      args: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dungeonArmourAlignment(overrides?: CallOverrides): Promise<BigNumber>;

    dungeonAttackAlignment(overrides?: CallOverrides): Promise<BigNumber>;

    dungeonBattleStart(overrides?: CallOverrides): Promise<BigNumber>;

    dungeonHealthAlignment(overrides?: CallOverrides): Promise<BigNumber>;

    dungeonRewardRuneAlignment(overrides?: CallOverrides): Promise<BigNumber>;

    dungeonStrength(overrides?: CallOverrides): Promise<BigNumber>;

    getFreeSlotID(overrides?: CallOverrides): Promise<BigNumber>;

    getSeekerSlotHash(
      slotID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeekerSlotID(
      seekerID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifiedRuneAlignment(
      runeTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resetBattle(
      _dungeonAttackAlignment: PromiseOrValue<BigNumberish>,
      _dungeonArmourAlignment: PromiseOrValue<BigNumberish>,
      _dungeonHealthAlignment: PromiseOrValue<BigNumberish>,
      _dungeonRewardRuneAlignment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      actionKind: PromiseOrValue<BigNumberish>,
      seekerID: PromiseOrValue<BigNumberish>,
      attackRuneID: PromiseOrValue<BigNumberish>,
      armourRuneID: PromiseOrValue<BigNumberish>,
      healthRuneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyState(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    alignmentBonus(
      sourceAlignment: PromiseOrValue<BigNumberish>,
      targetAlignment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRune(
      state: CombatStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitAction(
      actionKind: PromiseOrValue<BigNumberish>,
      slotID: PromiseOrValue<BigNumberish>,
      args: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dungeonArmourAlignment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dungeonAttackAlignment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dungeonBattleStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dungeonHealthAlignment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dungeonRewardRuneAlignment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dungeonStrength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFreeSlotID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSeekerSlotHash(
      slotID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeekerSlotID(
      seekerID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifiedRuneAlignment(
      runeTypeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetBattle(
      _dungeonAttackAlignment: PromiseOrValue<BigNumberish>,
      _dungeonArmourAlignment: PromiseOrValue<BigNumberish>,
      _dungeonHealthAlignment: PromiseOrValue<BigNumberish>,
      _dungeonRewardRuneAlignment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      actionKind: PromiseOrValue<BigNumberish>,
      seekerID: PromiseOrValue<BigNumberish>,
      attackRuneID: PromiseOrValue<BigNumberish>,
      armourRuneID: PromiseOrValue<BigNumberish>,
      healthRuneID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyState(
      state: CombatStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
